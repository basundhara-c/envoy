---
node:
  id: downstream-envoy-node
  cluster: downstream-envoy-cluster

# Enable reverse connection bootstrap extension which registers the custom resolver
bootstrap_extensions:
- name: envoy.bootstrap.reverse_tunnel.downstream_socket_interface
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.bootstrap.reverse_tunnel.downstream_socket_interface.v3.DownstreamReverseConnectionSocketInterface
    stat_prefix: "downstream_reverse_connection"

static_resources:
  listeners:
    # Services reverse conn APIs
    - name: rev_conn_api_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: rev_conn_api
                codec_type: AUTO
                route_config:
                  name: rev_conn_api_route
                  virtual_hosts: []
                http_filters:
                  - name: envoy.filters.http.reverse_conn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.reverse_conn.v3.ReverseConn
                      ping_interval: 30
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

    # Forwards incoming http requests to backend
    - name: ingress_http_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 6060
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  name: ingress_http_route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: '/on_prem_service'
                          route:
                            cluster: downstream-envoy-service
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

    # Initiates reverse connections to cloud using custom resolver
    - name: reverse_conn_listener
      listener_filters_timeout: 0s
      listener_filters:
        # Filter that responds to keepalives on reverse connection sockets
        - name: envoy.filters.listener.reverse_connection
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.reverse_connection.v3.ReverseConnection
            ping_wait_timeout: 10
      # Use custom address with reverse connection metadata encoded in URL format
      address:
        socket_address:
          # This encodes: src_node_id=downstream-envoy-node, src_cluster_id=downstream-envoy-cluster, src_tenant_id=downstream-envoy-tenant
          # and remote clusters: cloud with 1 connection
          address: "rc://downstream-envoy-node:downstream-envoy-cluster:downstream-envoy-tenant@cloud:1"
          port_value: 0
          # Use custom resolver that can parse reverse connection metadata
          resolver_name: "envoy.resolvers.reverse_connection"
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: reverse_conn_listener
                route_config:
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: '/on_prem_service'
                          route:
                            cluster: downstream-envoy-service
                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  # Cluster designating cloud-envoy
  clusters:
    - name: cloud
      type: STRICT_DNS
      connect_timeout: 30s
      load_assignment:
        cluster_name: cloud
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: cloud-envoy # Container name of cloud-envoy in docker-compose
                  port_value: 9000   # Port where cloud-envoy's rev_conn_api_listener listens

    # Backend HTTP service behind downstream envoy which
    # we will access via reverse connections
    - name: downstream-envoy-service
      type: STRICT_DNS
      connect_timeout: 30s
      load_assignment:
        cluster_name: downstream-envoy-service
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: downstream-envoy-service
                    port_value: 80

admin:
  access_log_path: "/dev/stdout"
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 8888

layered_runtime:
  layers:
  - name: layer
    static_layer:
      re2.max_program_size.error_level: 1000